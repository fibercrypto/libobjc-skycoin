

#import "OAIInlineResponse2002ManagedObjectBuilder.h"

/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

@implementation OAIInlineResponse2002ManagedObjectBuilder

-(instancetype)init {
    self = [super init];
    if (self != nil) {
       _outputsBuilder = [[OAIApiv1exploreraddressOutputsManagedObjectBuilder alloc] init];
       _inputsBuilder = [[OAIApiv1exploreraddressInputsManagedObjectBuilder alloc] init];
       _statusBuilder = [[OAIApiv1exploreraddressStatusManagedObjectBuilder alloc] init];
    }
    return self;
}

-(OAIInlineResponse2002ManagedObject*)createNewOAIInlineResponse2002ManagedObjectInContext:(NSManagedObjectContext*)context {
    OAIInlineResponse2002ManagedObject *managedObject = [NSEntityDescription insertNewObjectForEntityForName:NSStringFromClass([OAIInlineResponse2002ManagedObject class]) inManagedObjectContext:context];
    return managedObject;
}

-(OAIInlineResponse2002ManagedObject*)OAIInlineResponse2002ManagedObjectFromOAIInlineResponse2002:(OAIInlineResponse2002*)object context:(NSManagedObjectContext*)context {
    OAIInlineResponse2002ManagedObject* newOAIInlineResponse2002 = [self createNewOAIInlineResponse2002ManagedObjectInContext:context];
    [self updateOAIInlineResponse2002ManagedObject:newOAIInlineResponse2002 withOAIInlineResponse2002:object];
    return newOAIInlineResponse2002;
}

-(void)updateOAIInlineResponse2002ManagedObject:(OAIInlineResponse2002ManagedObject*)managedObject withOAIInlineResponse2002:(OAIInlineResponse2002*)object {
    if(!managedObject || !object) {
        return;
    }
    NSManagedObjectContext* context = managedObject.managedObjectContext;
    if(managedObject.outputs) {
        for (id object in managedObject.outputs) {
            [context deleteObject:object];
        }
    }
    if(object.outputs) {
        NSMutableOrderedSet * convertedObjs = [NSMutableOrderedSet orderedSet];
        for (id innerObject in object.outputs) {
            id convertedObj = [self.outputsBuilder OAIApiv1exploreraddressOutputsManagedObjectFromOAIApiv1exploreraddressOutputs:innerObject context:managedObject.managedObjectContext];
            [convertedObjs addObject:convertedObj];
        }
        managedObject.outputs = convertedObjs;
    }
    managedObject.innerHash = [object.innerHash copy];
    if(managedObject.inputs) {
        for (id object in managedObject.inputs) {
            [context deleteObject:object];
        }
    }
    if(object.inputs) {
        NSMutableOrderedSet * convertedObjs = [NSMutableOrderedSet orderedSet];
        for (id innerObject in object.inputs) {
            id convertedObj = [self.inputsBuilder OAIApiv1exploreraddressInputsManagedObjectFromOAIApiv1exploreraddressInputs:innerObject context:managedObject.managedObjectContext];
            [convertedObjs addObject:convertedObj];
        }
        managedObject.inputs = convertedObjs;
    }
    managedObject.fee = [object.fee copy];
    managedObject.sigs = [object.sigs copy];
    managedObject.length = [object.length copy];
    managedObject.txid = [object.txid copy];
    managedObject.type = [object.type copy];

    if(!managedObject.status) {
        managedObject.status = [self.statusBuilder OAIApiv1exploreraddressStatusManagedObjectFromOAIApiv1exploreraddressStatus:object.status context:managedObject.managedObjectContext];
    } else {
        [self.statusBuilder updateOAIApiv1exploreraddressStatusManagedObject:managedObject.status withOAIApiv1exploreraddressStatus:object.status];
    }
    managedObject.timestamp = [object.timestamp copy];

}

-(OAIInlineResponse2002*)OAIInlineResponse2002FromOAIInlineResponse2002ManagedObject:(OAIInlineResponse2002ManagedObject*)obj {
    if(!obj) {
        return nil;
    }
    OAIInlineResponse2002* newOAIInlineResponse2002 = [[OAIInlineResponse2002 alloc] init];
    [self updateOAIInlineResponse2002:newOAIInlineResponse2002 withOAIInlineResponse2002ManagedObject:obj];
    return newOAIInlineResponse2002;
}

-(void)updateOAIInlineResponse2002:(OAIInlineResponse2002*)newOAIInlineResponse2002 withOAIInlineResponse2002ManagedObject:(OAIInlineResponse2002ManagedObject*)obj {
    if(obj.outputs != nil) {
        NSMutableArray* convertedObjs = [NSMutableArray array];
        for (id innerObject in obj.outputs) {
            id convertedObj = [self.outputsBuilder OAIApiv1exploreraddressOutputsFromOAIApiv1exploreraddressOutputsManagedObject:innerObject];
            [convertedObjs addObject:convertedObj];
        }
        newOAIInlineResponse2002.outputs = (NSArray<OAIApiv1exploreraddressOutputs>*)convertedObjs;
    }
    
    newOAIInlineResponse2002.innerHash = [obj.innerHash copy];
    if(obj.inputs != nil) {
        NSMutableArray* convertedObjs = [NSMutableArray array];
        for (id innerObject in obj.inputs) {
            id convertedObj = [self.inputsBuilder OAIApiv1exploreraddressInputsFromOAIApiv1exploreraddressInputsManagedObject:innerObject];
            [convertedObjs addObject:convertedObj];
        }
        newOAIInlineResponse2002.inputs = (NSArray<OAIApiv1exploreraddressInputs>*)convertedObjs;
    }
    
    newOAIInlineResponse2002.fee = [obj.fee copy];
    newOAIInlineResponse2002.sigs = [obj.sigs copy];
    newOAIInlineResponse2002.length = [obj.length copy];
    newOAIInlineResponse2002.txid = [obj.txid copy];
    newOAIInlineResponse2002.type = [obj.type copy];
    newOAIInlineResponse2002.status = [self.statusBuilder OAIApiv1exploreraddressStatusFromOAIApiv1exploreraddressStatusManagedObject:obj.status];
    newOAIInlineResponse2002.timestamp = [obj.timestamp copy];
}

@end
